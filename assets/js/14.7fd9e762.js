(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{221:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},(function(){this._self._c;return this._m(0)}),[function(){var t=this,s=t._self._c;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"ts相关知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts相关知识"}},[t._v("#")]),t._v(" TS相关知识")]),t._v(" "),s("h2",{attrs:{id:"ts配置知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts配置知识点"}},[t._v("#")]),t._v(" TS配置知识点")]),t._v(" "),s("h3",{attrs:{id:"tsconfig-js配置项说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tsconfig-js配置项说明"}},[t._v("#")]),t._v(" tsconfig.js配置项说明")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"compilerOptions"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Visit https://aka.ms/tsconfig.json to read more about this file */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Basic Options */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "incremental": true,                   /* Enable incremental compilation */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"target"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"es5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* target用于指定编译之后的版本目标 version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"module"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commonjs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 用来指定要使用的模块标准 : 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"lib"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"es6"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DOM"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* lib用于指定要包含在编译中的库文件，这个我们在之前的课程中讲过一点，如果你要使用一些ES6的新语法，你需要引入ES6这个库，或者也可以写ES2015 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "allowJs": true,                       /* allowJs设置的值为true或false，用来指定是否允许编译JS文件，默认是false，即不编译JS文件. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "checkJs": true,                       /* 用来指定是否检查和报告JS文件中的错误，默认是false. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"jsx\": \"preserve\",                     /* 指定JSX代码用于的开发环境: 'preserve', 'react-native', or 'react'. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"declaration\": true,                   /* 用来指定是否在编译的时候生成相应的的'.d.ts'声明文件，如果设为true，编译每个ts文件之后会生成一个JS文件和一个声明文件，但是declaration和allowJs不能同时设为true. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"declarationMap\": true,                /* 指定是否为声明文件'.d.ts'生成map文件 */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"sourceMap\": true,                     /* 用来指定编译时是否生成'.map'文件. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "outFile": "./",                       /* 用于指定将输出文件合并为一个文件，它的值是一个文件路径，比如设置为"./dist/main.js"，则输出的文件为一个main.js。但是要注意，只有设置module的值为amd和system模块时才支持这个配置 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "outDir": "./",                        /* 用来指定输出文件夹，值为哟个文件夹路径字符串，输出的文件都将放置在这个文件夹下 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "rootDir": "./",                       /* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "composite": true,                     /* 是否编译构建应用项目 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "removeComments": true,                /* 用于指定是否将编译后的文件中的注释删除掉，设为true的话即删除注释 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noEmit": true,                        /* 不生成编译文件，这个一般很少用了 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "importHelpers": true,                 /* 指定是否引入tslib里的辅助工具函数，默认为false */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "downlevelIteration": true,            /* 当target为"ES5"或"ES3"时，为"for-of"、"spread"和"destructuring"中的迭代器提供完全支持 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "isolatedModules": true,               /* 指定是否将每个文件作为单独的模块，默认为true，它不可以和declaration同时设定. */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Strict Type-Checking Options */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"strict"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 用于指定是否启动所有类型检查，如果设为true则会同时开启下面这几个严格类型检查，默认为false */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitAny": true,                 /* 如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any类型，如果将noImplicitAny设为true，则如果没有设置明确的类型会报错，默认值为false */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictNullChecks": true,              /* 当设为true时，null和undefined值不能赋值给非这两种类型的值，别的类型的值也不能赋值给它们，除了any类型，还有个例外就是undefined可以赋值给void类型 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictFunctionTypes": true,           /* 用来指定是否使用函数双向协变检查 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictBindCallApply": true,           /* 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "strictPropertyInitialization": true,  /* 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为false. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitThis": true,                /* 当this表达式的值为any类型时，生成一个错误 */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "alwaysStrict": true,                  /* 指定始终以严格模式检查每个模式，并且在编译之后的JS文件中加入"use strict"字符串，用来告诉浏览器该JS为严格模式. */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Additional Checks */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noUnusedLocals": true,                /* 用于检查是否有定义了但是没有使用的变量。对于这一点的检测，使用ESLint可以在你书写代码的时候做提示，你可以配合使用，默认值为false. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noUnusedParameters": true,            /* 用于检查是否有在函数体中没有使用的参数，这个也可以配合ESLint来做检查，默认为false. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noImplicitReturns": true,             /* 用于检查函数是否有返回值，默认为false. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "noFallthroughCasesInSwitch": true,    /* 用于检查switch中是否有case没有使用break跳出switch，默认为false. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"noUncheckedIndexedAccess\": true,      /* Include 'undefined' in index signature results */")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Module Resolution Options */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \"moduleResolution\": \"node\",            /* 用于模块元解析策略，有两种类型: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "baseUrl": "./",                       /* 用于设置解析非相对模块名称的基本目录相对模块是不会受baseUrl的影响. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "paths": {},                           /* 用于设置模块名到基于baseUrl的路径映射. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "rootDirs": [],                        /* 指定一个路径列表，在构建时编译器会将这个路径列表中的内容都放到一个文件夹中. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "typeRoots": [],                       /* 用于指定声明文件或文件夹的路径列表，如果指定了此像，则只有在这里列出的声明文件才会被加载. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "types": [],                           /* 用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "allowSyntheticDefaultImports": true,  /* 用来指定允许从没有默认导出的模块中默认导入. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"esModuleInterop"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "preserveSymlinks": true,              /* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Source Map Options */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "sourceRoot": "",                      /* 用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "mapRoot": "",                         /* 用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "inlineSourceMap": true,               /* 指定是否将map文件的内容和js文件编译在同一个js文件中，如果设为true，则map的内容会以//# sourceMappingURL= 然后接base64字符串的形式插入在js文件底部. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "inlineSources": true,                 /* 用于指定是否进一步将.ts文件的内容也包含到输出文件中. */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Experimental Options */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "experimentalDecorators": true,        /* 用于指定是否启用实验性的装饰器特性. */')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "emitDecoratorMetadata": true,         /* 用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库. */')]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Advanced Options */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"skipLibCheck"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Skip type checking of declaration files. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"forceConsistentCasingInFileNames"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Disallow inconsistently-cased references to the same file. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "files": [], // files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件。如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用 * ? ** / 等通配符')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "include": [], // include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "exclude": [], // exclude表示要排除的、不编译的文件，它可以指定一个列表，规则和include一样，可以是文件或文件夹，可以是相对或绝对路径，可以使用通配符。')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "extends": "", // extends可以指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件会覆盖当前文件定义的配置。TS在3.2的版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件。')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "compileOnSave": true, // compileOnSave的值是true或false，如果设为true，在我们编辑了项目中文件保存的时候，编辑器会根据tsconfig.json的配置重新生成文件，不过需这个要编辑器支持')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "references": [] // 一个对象数组，指定要引用的项目')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])])}],!1,null,null,null);s.default=a.exports}}]);